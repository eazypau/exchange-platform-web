import firebase from "firebase/app";
import "firebase/auth";
import "firebase/firestore";
import "firebase/firebase-storage";

const firebaseConfig = {
  apiKey: import.meta.env.VITE_APP_FIREBASE_API_KEY,
  authDomain:
    import.meta.env.VITE_APP_FIREBASE_AUTH_DOMAIN + ".firebaseapp.com",
  projectId: import.meta.env.VITE_APP_FIREBASE_PROJECT_ID,
  storageBucket:
    import.meta.env.VITE_APP_FIREBASE_STORAGE_BUCKET + ".appspot.com",
  messagingSenderId: import.meta.env.VITE_APP_FIREBASE_MESSAGING_SENDER_ID,
  appId: import.meta.env.VITE_APP_FIREBASE_APP_ID,
  measurementId: import.meta.env.VITE_APP_FIREBASE_MEASUREMENT_ID,
};

const firebaseApp = firebase.initializeApp(firebaseConfig);

const db = firebaseApp.firestore(); //initate firestore connection
// const profileCollection = db.collection('profile')
const profileCollection = db.collection("userProfile");
// const productCollection = db.collection('addproduct')
// Get a reference to the storage service, which is used to create references in your storage bucket
const storageRef = firebase.storage().ref(); // Points to root reference
const imageRef = storageRef.child("images"); // Points to folder name images
// const spaceRef = imageRef.child(fileName);

// file path
// const pathName = spaceRef.fullPath; // 'images/fileName'
// const name = spaceRef.name; // 'fileName'

export const getUserProducts = async () => {
  const user = currentUser();
  const listOfDocument = profileCollection.doc(user).collection("products");
  const getList = await listOfDocument.get();
  const snapshot = getList.docs;
  const docContainer = [];
  if (snapshot !== null) {
    snapshot.forEach((docs) => {
      const product = docs.data();
      console.log(product);
      docContainer.push(product);
    });
  }
  return docContainer;
};

export const getSpecificProduct = async (prodID) => {
  const user = currentUser();
  const productDoc = await profileCollection
    .doc(user)
    .collection("products")
    .doc(prodID)
    .get();
  const productData = productDoc.data();
  console.log(productData);
  console.log("Product name: ", productData.name);
  return productData;
};

export const getOtherUserProduct = async (prodUserId, prodID) => {
  const user = currentUser();
  const productDoc = await profileCollection
    .doc(prodUserId)
    .collection("products")
    .doc(prodID)
    .get();
  const productData = productDoc.data();
  console.log(productData);
  console.log("Product name: ", productData.name);
  return productData;
};

// export const getUserProducts = async (userId) => {
//   return await profileCollection
//     .doc(userId)
//     .collection("products")
//     .get().then((snapshot) => {
//     console.log(snapshot.docs);
//     const listOfProducts = snapshot.docs;
//     listOfProducts.forEach((docs) => {
//       const list = docs.data();
//       console.log(list);
//     })
//   })
//    return products.data();
// };

export const createProfile = (userId, userInfo) => {
  return profileCollection.doc(userId).set(userInfo);
};

// currently this function grabs the entire list of document in userProfile collection
export const getUserProfile = async () => {
  return await profileCollection.get().then((snapshot) => {
    console.log(snapshot.docs);
    const listOfDocs = snapshot.docs;
    listOfDocs.forEach((docs) => {
      const list = docs.data();
      console.log(list);
    });
  });
};

// this function grabs the user documents by matching the user email.
export const getUserProfileDoc = async (uid) => {
  const userDoc = profileCollection.doc(uid);
  const getDoc = await userDoc.get();
  // console.log(getDoc);
  if (!getDoc.exists) {
    console.log("No such document!");
  } else {
    console.log("Document data:", getDoc.data());
    const data = getDoc.data();
    return data;
  }
};

export const createProduct = async (productId, productDetails) => {
  const user = currentUser();
  console.log(user);
  await profileCollection
    .doc(uid) // with the ID from the root collection
    .collection("products") // access to the subcollection
    .doc(productId)
    .set(productDetails); // add data into the subcollection with an autogenerated ID
  return console.log(
    profileCollection.doc(uid).collection("products").doc(productId).get()
  );
};

export const deleteProduct = async (productId) => {
  const user = currentUser();
  const getProduct = profileCollection
    .doc(user)
    .collection("products")
    .doc(productId);
  console.log(getProduct.id);
  await getProduct.delete();
  if (getProduct !== "") {
    console.log("sucessfully delete product: ", getProduct);
  } else {
    console.log("Could not delete the product!");
  }
};

export const currentUser = () => {
  firebase.auth().onAuthStateChanged((user) => {
    if (user) {
      // User is signed in, see docs for a list of available properties
      // https://firebase.google.com/docs/reference/js/firebase.User
      console.log("User is logged in.");
      let uid = user.uid;
      // console.log(uid);
      return uid;
    } else {
      console.log("User is logged out.");
    }
  });
};

export const login = (email, password) => {
  return firebase.auth().signInWithEmailAndPassword(email, password);
};

export const forgotPassword = (email) => {
  return firebase.auth().sendPasswordResetEmail(email);
};

export const getAllUserProducts = async () => {
  const user = currentUser();
  const allUser = await profileCollection.get();
  console.log(allUser);
  const userContainer = [];
  const productDocContainer = [];
  if (allUser !== null) {
    allUser.forEach((docs) => {
      const userProfile = docs.data();
      // console.log(userProfile);
      userContainer.push(userProfile);
    });
    for (let i = 0; i <= userContainer.length - 1; i++) {
      let userId = userContainer[i].id;
      if (userId !== user.uid) {
        let userProducts = await profileCollection
          .doc(userId)
          .collection("products")
          .get();
        if (userProducts !== null) {
          userProducts.forEach((docs) => {
            const product = docs.data();
            // console.log(product);
            productDocContainer.push(product);
          });
        }
      }
    }
  }
  console.log(productDocContainer);
  return productDocContainer;
};

export const updateUserProfile = async (newFirstName, newLastName, newAboutMe, newShippingAddress, uid) => {
  const userProfile = profileCollection.doc(uid);
  console.log("Accessing profile document");
  // console.log("user is: ", userProfile);
  const updating = await userProfile.update({
    first_name: newFirstName,
    last_name: newLastName,
    about: newAboutMe,
    address: newShippingAddress,
  });
  console.log("Update in progress...");
  // if (updating !== null) {
  //   console.log("Update in progress");
  // } else {
  //   console.log("Update failed...");
  // }
  return updating;
};

export const updateProductDoc = async (
  newProductName,
  newProductPoints,
  newProductQty,
  newProductConditions,
  newProductDescription,
  prodId
) => {
  const user = await currentUser();
  const productDocument = profileCollection
    .doc(user.uid)
    .collection("products")
    .doc(prodId);
  return productDocument.update({
    name: newProductName,
    points: newProductPoints,
    quantity: newProductQty,
    conditions: newProductConditions,
    description: newProductDescription,
  });
};
